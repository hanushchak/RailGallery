@model IPagedList<RailGallery.Models.Image>
@using X.PagedList.Mvc.Core;
@using X.PagedList;
@using X.PagedList.Web.Common;
<link href="/Content/PagedList.css" rel="stylesheet" type="text/css" />
@{
    ViewData["Title"] = "Search Results";
}


<div class="row">
    <div class="col text-center">
        <h4>@ViewData["Title"]</h4>

        @if (Model.Count() == 0) // If there are no search results available, display the message
        {
            <p class="mt-5">No photos found.</p>
            <a asp-controller="Search" asp-action="Index">New Search</a>
        }
        else // If the search returned any results, render the following HTML
        {
            <div class="mt-4">
                @Html.PagedListPager(Model, page => Url.Action("Results", new // Pagination controls
                {
                    page, // Current page
                    // Applied search filters
                    ImageTitle = ViewBag.ImageTitle,
                    ImageAuthor = ViewBag.ImageAuthor,
                    ImageDescription = ViewBag.ImageDescription,
                    LocomotiveModel = ViewBag.LocomotiveModel,
                    LocomotiveBuilt = ViewBag.LocomotiveBuilt,
                    ImageAlbum = ViewBag.ImageAlbum,
                    ImageCategory = ViewBag.ImageCategory,
                    ImageTakenDate = ViewBag.ImageTakenDate,
                    ImageLocation = ViewBag.ImageLocation
           }), new PagedListRenderOptions
           {
               ContainerDivClasses = new string[] { "pagination justify-content-center" },
               LinkToPreviousPageFormat = "Previous",
               LinkToNextPageFormat = "Next",
               LiElementClasses = new string[] { "page-item" },
               PageClasses = new string[] { "page-link" }
           })
            </div>

            <div class="d-flex justify-content-center flex-wrap">
                @foreach (var image in Model) // Iterate thorugh the collection of search results to display them
                {
                    string css = "";
                    bool imgPrivate = image.ImagePrivacy.Equals(RailGallery.Enums.Privacy.Private);
                    if (imgPrivate)
                    {
                        css = "alert-warning"; // If the photo is private, display it with a yellow background
                    }
                    <div class="d-inline-flex align-self-start p-2">
                        <a asp-controller="View" asp-action="View" asp-route-id="@image.ImageID" class="text-decoration-none">
                            <div class="card btn-light @css" style="max-width: 302px;">
                                <img class="card-img-top" style="object-fit: cover; max-width: 300px; max-height: 200px; min-width: fit-content;" src="/api/Photo/@image.ImagePath/Thumbnail" asp-append-version="true" alt="Card image cap">
                                <div class="card-body p-2">
                                    <h6 class="card-title">@image.ImageTitle</h6>
                                    <h6 class="card-subtitle mb-1 text-muted">by <b>@image.ApplicationUser.UserName</b></h6>
                                    @if (!imgPrivate) // If the photo is not private, display the number of comments and likes
                                    {
                                        <p class="card-text"><small><b>@image.Comments.Count</b> comments, <b>@image.Likes.Count</b> likes</small></p>
                                    }
                                    else // If the photo is private, do not display the number of comments and likes
                                    {
                                        <p class="card-text text-muted"><small>(private photo)</small></p>
                                    }

                                </div>
                            </div>
                        </a>
                    </div>
                }
            </div>
            <div class="mt-4">
                @Html.PagedListPager(Model, page => Url.Action("Results", new // Pagination
                {
                    page, // Current page
                    // Applied search filters
                    ImageTitle = ViewBag.ImageTitle,
                    ImageAuthor = ViewBag.ImageAuthor,
                    ImageDescription = ViewBag.ImageDescription,
                    LocomotiveModel = ViewBag.LocomotiveModel,
                    LocomotiveBuilt = ViewBag.LocomotiveBuilt,
                    ImageAlbum = ViewBag.ImageAlbum,
                    ImageCategory = ViewBag.ImageCategory,
                    ImageTakenDate = ViewBag.ImageTakenDate,
                    ImageLocation = ViewBag.ImageLocation
                }), new PagedListRenderOptions
                {
                    ContainerDivClasses = new string[] { "pagination justify-content-center" },
                    LinkToPreviousPageFormat = "Previous",
                    LinkToNextPageFormat = "Next",
                    LiElementClasses = new string[] { "page-item" },
                    PageClasses = new string[] { "page-link" }
                })
            </div>
        }
    </div>
</div>